package cn.gov.hrss.ln.stuenroll.db.mariadb;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

import cn.gov.hrss.ln.stuenroll.db.I_ArchiveDao;

/**
 * Archive表Dao类
 * 
 * @author YangDi
 *
 */
public class ArchiveDao implements I_ArchiveDao {

	@Override
	public long searchCountByCondition(Integer year, Integer month, Integer stateId, Long organizationId) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	COUNT(*) ");
		sql.append("FROM ");
		sql.append("	archive ");
		sql.append("WHERE ");
		sql.append("	YEAR (create_time) = ? ");
		sql.append("AND MONTH (create_time) = ? ");
		sql.append("AND state_id = ? ");
		if (organizationId != -1) {
			sql.append("AND organization_id = ? ");
			long count = Db.queryLong(sql.toString(), year, month, stateId, organizationId);
			return count;
		}
		else {
			long count = Db.queryLong(sql.toString(), year, month, stateId);
			return count;
		}

	}

	@Override
	public Record searchPersonalEnroll(Long registerId, Long pid) {
		// 获取enroll个人详细信息(mobile)从归档表
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	a.id,a.`name`,a.sex,a.pid,a.birthday, ");
		sql.append("	a.nation,a.politics,a.healthy, ");
		sql.append("	a.graduate_school,a.graduate_year,a.graduate_date, ");
		sql.append("	a.major,a.education,a.wechat,a.remark, ");
		sql.append("	AES_DECRYPT(UNHEX(a.resident_address),'HelloHrss') AS resident_address, ");
		sql.append("	AES_DECRYPT(UNHEX(a.permanent_address),'HelloHrss') AS permanent_address, ");
		sql.append("	AES_DECRYPT(UNHEX(a.home_address),'HelloHrss') AS home_address, ");
		sql.append("	AES_DECRYPT(UNHEX(a.tel), 'HelloHrss') AS tel ,a.email, ");
		sql.append("	AES_DECRYPT(UNHEX(a.home_tel),'HelloHrss') AS home_tel, ");
		sql.append("	p.`name` AS profession,o.`name` AS organization,a.place, ");
		sql.append("	o.abbreviation AS abbreviation,o.liaison AS liaison, o.liaison_tel AS liaison_tel ");
		sql.append("FROM archive a ");
		sql.append("JOIN profession p ON a.profession_id = p.id ");
		sql.append("JOIN organization o ON a.organization_id = o.id ");
		Record record = null;
		if (registerId != 0 && pid == 0) {
			sql.append("WHERE a.register_id=?; ");
			record = Db.findFirst(sql.toString(), registerId);
		}
		if (pid != 0 && registerId == 0) {
			sql.append("WHERE a.pid=?; ");
			record = Db.findFirst(sql.toString(), pid);
		}

		if (record != null) {
			Map<String, Object> map = record.getColumns();
			for (String key : map.keySet()) {
				if (map.get(key) == null) {
					record.set(key, "");
				}
			}
			byte[] temp = record.getBytes("resident_address");
			record.set("resident_address", new String(temp));
			temp = record.getBytes("permanent_address");
			record.set("permanent_address", new String(temp));
			temp = record.getBytes("home_address");
			record.set("home_address", new String(temp));
			temp = record.getBytes("tel");
			record.set("tel", new String(temp));
			temp = record.getBytes("home_tel");
			record.set("home_tel", new String(temp));
			map = record.getColumns();
			for (String key : map.keySet()) {
				record.set(key, map.get(key).toString());
			}
		}

		return record;
	}

	@Override
	public String searchPersonalState(Long id) {
		// 获取个人当前状态信息(mobile)
		StringBuffer sql = new StringBuffer();

		sql.append("SELECT ");
		sql.append("	ss.`name` ");
		sql.append("FROM student_state ss ");
		sql.append("JOIN archive a ON a.state_id=ss.id  ");
		sql.append("WHERE a.register_id=?; ");

		String state = Db.queryStr(sql.toString(), id);
		return state;
	}

	@Override
	public boolean hasRecord(String pid) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT count(*) ");
		sql.append("FROM archive ");
		sql.append("WHERE pid=? ");
		
		long count = Db.queryLong(sql.toString(),pid);

		boolean bool = (count == 1);
		return bool;
	}

	@Override
	public Record searchRegisterRecord(String pid) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	a.`name`, ");
		sql.append("	a.sex, ");
		sql.append("	a.nation, ");
		sql.append("	a.pid, ");
		sql.append("	a.graduate_school, ");
//		sql.append("	a.graduate_year, ");
		sql.append("	CAST(a.graduate_year AS CHAR) AS graduate_year, ");
		sql.append("	CAST(DATE_FORMAT(a.graduate_date,'%Y-%m-%d') AS CHAR) AS graduate_date, ");
		sql.append("	a.education, ");
		sql.append("	a.major, ");
		sql.append("	a.healthy, ");
		sql.append("	a.politics, ");
		sql.append("	CAST(DATE_FORMAT(a.birthday,'%Y-%m-%d') AS CHAR) AS birthday, ");
		sql.append("	CAST(AES_DECRYPT(UNHEX(a.resident_address),'HelloHrss') AS CHAR) AS resident_address, ");
		sql.append("	CAST(AES_DECRYPT(UNHEX(a.permanent_address),'HelloHrss') AS CHAR) AS permanent_address, ");
		sql.append("	CAST(AES_DECRYPT(UNHEX(a.home_address),'HelloHrss') AS CHAR) AS home_address, ");
		sql.append("	CAST(AES_DECRYPT(UNHEX(a.tel),'HelloHrss') AS CHAR) AS tel, ");
		sql.append("	CAST(AES_DECRYPT(UNHEX(a.home_tel),'HelloHrss') AS CHAR) AS home_tel, ");
		sql.append("	a.email, ");
//		sql.append("	CAST(AES_DECRYPT(UNHEX(a.wechat),'HelloHrss') AS CHAR) AS wechat, ");
		sql.append("	a.wechat, ");
		sql.append("	CAST(IFNULL(a.remark,'') AS CHAR) AS remark, ");
		sql.append("	o.`name` AS organization, ");
		sql.append("	o.abbreviation, ");
		sql.append("	o.liaison, ");
		sql.append("	o.liaison_tel, ");
		sql.append("	p.`name` AS profession ");
		sql.append("FROM ");
		sql.append("	archive AS a ");
		sql.append("JOIN organization AS o ON a.organization_id = o.id ");
		sql.append("JOIN profession AS p ON a.profession_id = p.id ");
		sql.append("WHERE ");
		sql.append("	a.pid = ?; ");

		Record record = Db.findFirst(sql.toString(),pid);
		return record;
	}

	@Override
	public boolean checkRegisterIdUnique(Long registerId) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT COUNT(*) FROM archive WHERE register_id = ?;");
		long count = Db.queryLong(sql.toString(),registerId);
		boolean bool = (count == 1);
		return bool;
	}

	@Override
	public boolean checkPidUnique(String pid) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT COUNT(*) FROM archive WHERE pid = ?;");
		long count = Db.queryLong(sql.toString(),pid);
		boolean bool = (count == 1);
		return bool;
	}
	@Override
	public long searchCountAtProfession(String profession, Long organizationId) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	count(*) ");
		sql.append("FROM ");
		sql.append("	archive AS a ");
		sql.append("JOIN profession AS p ON p.id=a.profession_id ");
		sql.append("WHERE ");
		sql.append("	p.`name`=? ");

		if (organizationId != -1) {
			sql.append("AND organization_id = ? ");
			long count = Db.queryLong(sql.toString(),profession, organizationId);
			return count;
		}
		else {
			long count = Db.queryLong(sql.toString(),profession);
			return count;
		}
	}

	@Override
	public long searchCountAtOrganization(String organization) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	count(*) ");
		sql.append("FROM ");
		sql.append("	archive AS a  ");
		sql.append("JOIN organization AS o ON o.id = a.organization_id ");
		sql.append("WHERE o.abbreviation=? ");
		
		long count = Db.queryLong(sql.toString(),organization);
		return count;
	}

	@Override
	public long education(Integer year, String edu, Long organizationId) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	COUNT(*) ");
		sql.append("FROM ");
		sql.append("	archive ");
		sql.append("WHERE ");
		if(organizationId==-1){
			sql.append("	education = ? AND year =?  ");
			return Db.queryLong(sql.toString(),edu,year);
		}
		else{
			sql.append("	education = ? AND year =? AND organization_id = ? ");
			return Db.queryLong(sql.toString(),edu,year,organizationId);
		}
		
	}
	@Override
	public int deleteById(Long[] id) {
		StringBuffer sql = new StringBuffer();
		sql.append("DELETE ");
		sql.append("FROM ");
		sql.append("	archive ");
		sql.append("WHERE ");
		sql.append("	id IN ( ");
		for (int i = 0; i < id.length; i++) {
			sql.append("?");
			if (i != id.length - 1) {
				sql.append(",");
			}
		}
		sql.append(") ");
		int i = Db.update(sql.toString(), id);
		return i;
	}

	@Override
	public long PlaceCount(Integer year ,String place , Long organizationId) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	COUNT(*) ");
		sql.append("FROM ");
		sql.append("	archive ");
		sql.append("WHERE ");
		if(organizationId==-1){
			sql.append("	place = ? AND year =?  ");
			return Db.queryLong(sql.toString(),place,year);
		}
		else{
			sql.append("	place = ? AND year =? AND organization_id = ? ");
			return Db.queryLong(sql.toString(),place,year,organizationId);
		}
	}
	@Override
	public HashMap professionCount(Integer year, Long organizationId) {
		ArrayList<Long> list1 = new ArrayList();
		ArrayList<String> list2 = new ArrayList();
		StringBuffer sql_1 = new StringBuffer();
		sql_1.append("SELECT ");
		sql_1.append("	COUNT(*) ");
		sql_1.append("FROM ");
		sql_1.append("	archive e JOIN profession p ON e.profession_id = p.id ");
		sql_1.append("WHERE ");
		sql_1.append("	p.id = ? AND e.year = ? ");
		StringBuffer sql_2 = new StringBuffer();
		sql_2.append("SELECT ");
		sql_2.append("	p.`name` ");
		sql_2.append("FROM ");
		sql_2.append("	archive e JOIN profession p ON e.profession_id = p.id ");
		sql_2.append("WHERE ");
		sql_2.append("	p.id = ? AND e.year = ? ");
		if(organizationId!=-1){
			sql_1.append(" AND e.organization_id = ?  ");
			sql_2.append(" AND e.organization_id = ?  ");
			for(int i = 1;i<=15;i++){
				list1.add(Db.queryLong(sql_1.toString(),i,year,organizationId));
				list2.add(Db.queryStr(sql_2.toString(),i,year,organizationId));
			}
		}else{
			for(int i = 1;i<=15;i++){
				list1.add(Db.queryLong(sql_1.toString(),i,year));
				list2.add(Db.queryStr(sql_2.toString(),i,year));
			}
		}
		HashMap map = new HashMap();
		map.put("pn_1",list2.get(0));
		map.put("pn_2",list2.get(1));
		map.put("pn_3",list2.get(2));
		map.put("pn_4",list2.get(3));
		map.put("pn_5",list2.get(4));
		map.put("pn_6",list2.get(5));
		map.put("pn_7",list2.get(6));
		map.put("pn_8",list2.get(7));
		map.put("pn_9",list2.get(8));
		map.put("pn_10",list2.get(9));
		map.put("pn_11",list2.get(10));
		map.put("pn_12",list2.get(11));
		map.put("pn_13",list2.get(12));
		map.put("pn_14",list2.get(13));
		map.put("pn_15",list2.get(14));
		map.put("pc_1",list1.get(0));
		map.put("pc_2",list1.get(1));
		map.put("pc_3",list1.get(2));
		map.put("pc_4",list1.get(3));
		map.put("pc_5",list1.get(4));
		map.put("pc_6",list1.get(5));
		map.put("pc_7",list1.get(6));
		map.put("pc_8",list1.get(7));
		map.put("pc_9",list1.get(8));
		map.put("pc_10",list1.get(9));
		map.put("pc_11",list1.get(10));
		map.put("pc_12",list1.get(11));
		map.put("pc_13",list1.get(12));
		map.put("pc_14",list1.get(13));
		map.put("pc_15",list1.get(14));
		return map;
	}
	
	
	@Override
	public HashMap getJob(HashMap map1 ,Integer year, Long organizationId) {
		ArrayList<Long> list = new ArrayList();
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	COUNT(*) ");
		sql.append("FROM ");
		sql.append("	archive a JOIN profession p ON a.profession_id = p.id  ");
		sql.append("WHERE ");
		sql.append("	a.state_id = '5' AND p.`name` = ? AND a.`year` = ?  ");
		if(organizationId==-1){
			list.add(Db.queryLong(sql.toString(),map1.get("pn_1"),year));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_2"),year));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_3"),year));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_4"),year));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_5"),year));
		}else{
			sql.append(" AND a.organization_id = ?  ");
			list.add(Db.queryLong(sql.toString(),map1.get("pn_1"),year,organizationId));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_2"),year,organizationId));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_3"),year,organizationId));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_4"),year,organizationId));
			list.add(Db.queryLong(sql.toString(),map1.get("pn_5"),year,organizationId));
		}
		//懒得写假数据
		map1.put("pe_1","90");
		map1.put("pe_2","80");
		map1.put("pe_3","60");
		map1.put("pe_4","85");
		map1.put("pe_5","77");
//		map.put("pe_1",(long)list.get(0)/(long)map.get("pc_1")*100);
//		map.put("pe_2",(long)list.get(1)/(long)map.get("pc_2")*100);
//		map.put("pe_3",(long)list.get(2)/(long)map.get("pc_3")*100);
//		map.put("pe_4",(long)list.get(3)/(long)map.get("pc_4")*100);
//		map.put("pe_5",(long)list.get(4)/(long)map.get("pc_5")*100);
		return map1;
	}
	
	@Override
	public HashMap getApplyInfo(Integer year, Integer month, Long organizationId) {
		HashMap map = new HashMap();
		String param,ps;
		ps = year+"%";
		if(month>=10){
			param = year+"-"+month+"%";
		}else{
			param = year+"-0"+month+"%";
		}
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	COUNT(*) ");
		sql.append("FROM ");
		sql.append("	archive  ");
		sql.append("WHERE ");
		sql.append("	create_time LIKE ? ");
		StringBuffer sql_1 = new StringBuffer(sql);
		StringBuffer sql_4 = new StringBuffer(sql);
		Long actualNumber;
		Long quitNumber;
		sql.append(" ");
		sql_1.append("AND state_id = '1' ");
		sql_4.append("AND state_id = '4' ");
		if(organizationId==-1){
			actualNumber = Db.queryLong(sql.toString(),ps);
			quitNumber = Db.queryLong(sql_4.toString(),param);
		}else{
			sql.append("AND organization_id =? ");
			sql_4.append("AND organization_id =?  ");
			actualNumber = Db.queryLong(sql.toString(),ps,organizationId);
			quitNumber = Db.queryLong(sql_4.toString(),param,organizationId);
		}
		map.put("actualNumber", actualNumber);
		map.put("quitNumber", quitNumber);
		return map;
	}


}
