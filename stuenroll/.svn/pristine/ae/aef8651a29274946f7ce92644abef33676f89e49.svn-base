package cn.gov.hrss.ln.stuenroll.db.mariadb;

import java.util.List;

import org.eclipse.xtend2.lib.StringConcatenation;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

import cn.gov.hrss.ln.stuenroll.db.I_RegisterDao;

public class RegisterDao implements I_RegisterDao {

	@Override
	public List<Record> searchSelectableEducation() {
		StringBuffer sql = new StringBuffer();
		sql.append("SHOW COLUMNS FROM enroll LIKE 'education'; ");
		List<Record> list = Db.find(sql.toString());

		return list;
	}

	@Override
	public List<Record> searchSelectableMajor() {
		StringBuffer sql = new StringBuffer();
		sql.append("SHOW COLUMNS FROM enroll LIKE 'major'; ");
		List<Record> list = Db.find(sql.toString());

		return list;
	}

	@Override
	public List<Record> searchSelectableHealthy() {
		StringBuffer sql = new StringBuffer();
		sql.append("SHOW COLUMNS FROM enroll LIKE 'healthy'; ");
		List<Record> list = Db.find(sql.toString());

		return list;
	}

	@Override
	public List<Record> searchSelectablePolitics() {
		StringBuffer sql = new StringBuffer();
		sql.append("SHOW COLUMNS FROM enroll LIKE 'politics'; ");
		List<Record> list = Db.find(sql.toString());

		return list;
	}

	@Override
	public List<Record> searchSelectablePlace() {
		StringBuffer sql = new StringBuffer();
		sql.append("SHOW COLUMNS FROM enroll LIKE 'place'; ");
		List<Record> list = Db.find(sql.toString());

		return list;
	}

	@Override
	public List<Record> searchOrgnizationJoinInYearAtDropDown(int year) {
		StringBuffer sql = new StringBuffer();

		sql.append("SELECT ");
		sql.append("	o.id, ");
		sql.append("	o.`name` ");
		sql.append("FROM ");
		sql.append("	organization_join oj ");
		sql.append("JOIN organization o ON oj.organization_id = o.id ");
		sql.append("WHERE ");
		sql.append("	oj.`year` = ? ");
		sql.append("AND oj.block = FALSE; ");

		List<Record> list = Db.find(sql.toString(), year);
		return list;
	}

	@Override
	public List<Record> searchOrgnizationJoinInYearWithProfessionAtDropDown(int year, long professionId) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	o.id, ");
		sql.append("	o.`name` ");
		sql.append("FROM ");
		sql.append("	organization o ");
		sql.append("JOIN organization_join oj ON o.id = oj.organization_id ");
		sql.append("JOIN organization_profession op ON oj.id = op.organization_join_id ");
		sql.append("JOIN profession p ON op.profession_id = p.id ");
		sql.append("WHERE ");
		sql.append("	oj.`year` = ? ");
		sql.append("AND oj.block = FALSE ");
		sql.append("AND p.id = ?; ");

		List<Record> list = Db.find(sql.toString(), year, professionId);
		return list;
	}

	@Override
	public List<Record> searchProfessionInYearAtDropDown(int year) {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT DISTINCT ");
		sql.append("	t.id, ");
		sql.append("	t.`name` ");
		sql.append("FROM ");
		sql.append("	( ");
		sql.append("		SELECT ");
		sql.append("			p.`name`, ");
		sql.append("			CAST(p.id AS CHAR) AS id ");
		sql.append("		FROM ");
		sql.append("			organization o ");
		sql.append("		JOIN organization_join oj ON o.id = oj.organization_id ");
		sql.append("		JOIN organization_profession op ON op.organization_join_id = oj.id ");
		sql.append("		JOIN profession p ON op.profession_id = p.id ");
		sql.append("		WHERE ");
		sql.append("			oj.`year` = ? ");
		sql.append("		AND oj.block = FALSE ");
		sql.append("		ORDER BY ");
		sql.append("			p.id ");
		sql.append("	) t; ");

		List<Record> list = Db.find(sql.toString(), year);
		return list;
	}
}
