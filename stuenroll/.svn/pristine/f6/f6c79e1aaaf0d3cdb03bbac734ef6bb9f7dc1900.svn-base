package cn.gov.hrss.ln.stuenroll.userinfo;

import com.jfinal.core.Controller;
import com.jfinal.kit.PathKit;
import com.jfinal.plugin.spring.Spring;
import com.jfinal.upload.UploadFile;
import com.mongodb.DB;
import com.mongodb.gridfs.GridFS;
import com.mongodb.gridfs.GridFSDBFile;
import com.mongodb.gridfs.GridFSInputFile;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import org.bson.types.ObjectId;
import org.eclipse.xtext.xbase.lib.Exceptions;
import java.util.HashMap;
import java.util.List;

import org.apache.shiro.authz.annotation.RequiresPermissions;

import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.spring.Spring;
import com.jfinal.upload.UploadFile;

import cn.gov.hrss.ln.stuenroll.db.I_UserInfoDao;
import cn.gov.hrss.ln.stuenroll.plugin.MongoKit;

import cn.gov.hrss.ln.stuenroll.util.csv.ReadCsv;
import cn.gov.hrss.ln.stuenroll.util.csv.WriteCsv;
import cn.gov.hrss.ln.stuenroll.util.excel.ReadExcel;
import cn.gov.hrss.ln.stuenroll.util.excel.WriteExcel;
import cn.gov.hrss.ln.stuenroll.util.xml.ReadXml;
import cn.gov.hrss.ln.stuenroll.util.xml.WriteXml;

@Spring("userInfoController")
public class UserInfoController extends Controller implements I_UserInfoController {
	private I_UserInfoService i_UserInfoService;
	private int rowsInPage;
	private int rowsInPage1;

	@RequiresPermissions({ "1_4" })
	@Override
	public void searchUserInfo() {
		String username = getPara("username");
		String name = getPara("name");
		Long organizationId = getParaToLong("organizationId");
		Long roleId = getParaToLong("roleId");
		String tel = getPara("tel");
		String email = getPara("email");

		String organization = getSessionAttr("organization");

		if (organization.equals("辽宁省就业网") == false) {
			organizationId = getSessionAttr("organizationId");
		}

		HashMap map = new HashMap();
		map.put("username", username);
		map.put("name", name);
		map.put("organizationId", organizationId);
		map.put("roleId", roleId);
		map.put("tel", tel);
		map.put("email", email);

		Long page = getParaToLong("page");
		if (page == null) {
			page = 1L;
		}
		long start = (page - 1) * rowsInPage;
		long length = rowsInPage;
		map.put("start", start);
		map.put("length", length);
		List<Record> list = i_UserInfoService.searchUserInfo(map);
		renderJson("result", list);

	}

	@RequiresPermissions({ "1_4" })
	@Override
	public void searchUserInfoCount() {
		String username = getPara("username");
		HashMap map = new HashMap();
		map.put("username", username);
		long count = i_UserInfoService.searchUserInfoCount(map);
		renderJson("result", count);
	}

	@RequiresPermissions({ "1_2" })
	@Override
	public void deleteUserInfo() {
		Long[] id = getParaValuesToLong("id");
		int i = i_UserInfoService.deleteUserInfo(id);
		renderJson("deleteRows", i);

	}

	@RequiresPermissions({ "1_1" })
	@Override
	public void searchSelectableRole() {
		List<Record> list = i_UserInfoService.searchSelectableRole();
		renderJson("result", list);

	}

	@RequiresPermissions({ "1_1" })
	@Override
	public void searchOrganizationJoinInYearAtDropDown() {
		try {
			int year = getParaToInt("year");
			List<Record> list = i_UserInfoService.searchOrganizationJoinInYearAtDropDown(year);
			renderJson("result", list);
		}
		catch (Exception e) {
			e.getStackTrace();
		}

	}

	@RequiresPermissions({ "1_1" })
	@Override
	public void insertUserInfo() {
		String username = getPara("username");
		String password = getPara("password");
		String name = getPara("name");
		String sex = getPara("sex");
		String pid = getPara("pid");
		String tel = getPara("tel");
		String email = getPara("email");
		String job = getPara("job");
		String organization = getPara("organization");
		Integer block = getParaToInt("block");
		String role = getPara("role");
		String photo_id = getPara("photo_id");

		HashMap map = new HashMap();
		map.put("username", username);
		map.put("password", password);
		map.put("name", name);
		map.put("sex", sex);
		map.put("pid", pid);
		map.put("tel", tel);
		map.put("email", email);
		map.put("job", job);
		map.put("organization", organization);
		map.put("block", block);
		map.put("role", role);
		map.put("photo_id", photo_id);
		int i = i_UserInfoService.insertUserInfo(map);
		renderJson("insert", i);

	}

	@RequiresPermissions({ "8_4" })
	@Override
	public void searchOrganizationArchiveMember() {
		String name = getPara("name");
		String sex = getPara("sex");
		String tel = getPara("tel");
		String pid = getPara("pid");
		String state = getPara("state");

		HashMap map = new HashMap();
		map.put("name", name);
		map.put("sex", sex);
		map.put("tel", tel);
		map.put("pid", pid);
		map.put("state", state);

		Long page = getParaToLong("page");
		if (page == null) {
			page = 1L;
		}
		long start = (page - 1) * rowsInPage1;
		long length = rowsInPage1;

		List<Record> list = i_UserInfoService.searchOrganizationArchiveMember(map, start, length);
		renderJson("result", list);

	}

	@RequiresPermissions({ "8_4" })
	@Override
	public void searchMemberCount() {
		String name = getPara("name");
		HashMap map = new HashMap();
		map.put("name", name);
		long count = i_UserInfoService.searchMemberCount(map);
		renderJson("result", count);

	}

	@RequiresPermissions({ "1_3" })
	@Override
	public void updateUserInfo() {
		String id = getPara("id");
		String username = getPara("username");
		String password = getPara("password");
		String name = getPara("name");
		String pid = getPara("pid");
		String sex = getPara("sex");
		String organization = getPara("organization");
		String tel = getPara("tel");
		String email = getPara("email");
		String job = getPara("job");
		Integer block = getParaToInt("block");
		String role = getPara("role");
		String photo_id = getPara("photo_id");

		HashMap map = new HashMap();
		map.put("id", id);
		map.put("username", username);
		map.put("password", password);
		map.put("name", name);
		map.put("pid", pid);
		map.put("sex", sex);
		map.put("organization", organization);
		map.put("tel", tel);
		map.put("email", email);
		map.put("job", job);
		map.put("block", block);
		map.put("role", role);
		map.put("photo_id", photo_id);

		int result = i_UserInfoService.updateUserInfo(map);
		renderJson("result", result);

	}

	@RequiresPermissions({ "1_4" })
	@Override
	public void searchExsitingdata() {
		String id = getPara("id");
		List<Record> exsitingdata = i_UserInfoService.searchExsitingdata(id);
		renderJson("exsitingdata", exsitingdata);
	}

	@RequiresPermissions({ "1_3" })
	@Override
	public void updateUserBlock() {
		String id = getPara("id");
		int block = getParaToInt("block");
		int result = i_UserInfoService.updateUserBlock(id, block);
		renderJson("result", result);

	}

	@RequiresPermissions({ "1_3" })
	@Override
	public void save() {
		try {
			UploadFile _file = this.getFile("photo");
			System.out.println(_file);
			File file = _file.getFile();
			// System.out.println(file);
			DB db = MongoKit.getDB();
			GridFS gridFS = new GridFS(db, "image");
			GridFSInputFile fsFile = gridFS.createFile(file);
			fsFile.save();
			file.delete();
			// HashMap map = new HashMap<Object, Object>();
			// map.put("result", Boolean.valueOf(true));
			Object _id = fsFile.getId();
			String _string = _id.toString();
			// map.put("photo_id", _string);
			// this.renderJson(map);
			this.renderJson("result", _string);

		}
		catch (Throwable _e) {
			throw Exceptions.sneakyThrow(_e);
		}
	}

	@RequiresPermissions({ "1_4" })
	@Override
	public void searchFile() {
		try {
			String id = this.getPara("id");
			DB db = MongoKit.getDB();
			GridFS gridFS = new GridFS(db, "image");
			ObjectId _objectId = new ObjectId(id);
			GridFSDBFile fsFile = gridFS.findOne(_objectId);
			HttpServletResponse _response = this.getResponse();
			ServletOutputStream _outputStream = _response.getOutputStream();
			fsFile.writeTo(_outputStream);
			this.renderNull();
		}
		catch (Throwable _e) {
			throw Exceptions.sneakyThrow(_e);
		}
	}

	@RequiresPermissions({ "1_4" })
	@Override
	public void searchPhotoId() {
		String id = getPara("id");
		String photo_id = i_UserInfoService.searchPhotoId(id);
		this.renderJson("photo_id", photo_id);

	}
	
	@RequiresPermissions({"6_4"})
	public void exportExcel(){
		/**
		 * 先获取页面要进行导出的list
		 */
		Long organization_id = getParaToLong("organizationId");
	    HashMap map = new HashMap();
	    String organization = getSessionAttr("organization"); // HttpSession中的组织名称
		// 如果不是就业网用户那么Java程序从HttpSession中提取机构ID，强制使用这个机构ID查询数据，所以用户只能看到自己机构的数据
		if (organization.equals("辽宁省就业网") == false) {
			organization_id = getSessionAttr("organizationId");
			System.out.println(organization_id);
		}else{
			organization_id = null;
		}
		map.put("organizationId", organization_id);
		Long page = getParaToLong("page");
		if (page == null) {
			page = 1L;
		}
		long start = (page - 1) * rowsInPage;
		long length = rowsInPage;
		map.put("start", start);
		map.put("length", length);
		List<Record> list =  i_UserInfoService.searchUserInfo(map);
		//这是最终导出excel的list
		List<Record> resultList = new ArrayList<Record>(); 
		int index = 0;
		for(Record record:list){

			index = index+1;
			String userId = record.getStr("id");
			String username = record.getStr("username");
			String name = record.getStr("name");
			String organizationName = record.getStr("organization");
			String roleName = record.getStr("role");
			String tel = record.getStr("tel");
			String email = record.getStr("email");
				
			Record temp = new Record();
			temp.set("序号", index)
			.set("用户ID",userId)
			.set("用户名", username)
			.set("姓名", name)
			.set("机构名称", organizationName)
			.set("角色", roleName)
			.set("电话", tel)
			.set("电子邮箱", email);
			resultList.add(resultList.size(),temp);		
		}
		String filePath = PathKit.getWebRootPath()+"/export.xls";
		//System.out.println(PathKit.getWebRootPath());
		File file = new File(filePath); //取临时文件
		if(!file.exists()){
			try {
				file.createNewFile(); //如果临时文件不存在创建临时文件
			}
			catch (IOException e) {
				e.printStackTrace();
			}
		}
		try {
			WriteExcel writer = new WriteExcel();
			String title = "导出用户信息";
			String[] headers = {"序号","用户ID","用户名","姓名","机构名称","角色","电话","电子邮箱"};
			OutputStream out = new FileOutputStream(filePath);
			writer.exportExcel(title, headers, resultList, out);
		}
		catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		//写完临时文件之后，开始启动浏览器下载
		String fileName = file.getName();
		//System.out.println(fileName);
		HttpServletResponse response = this.getResponse();
		//设置content-disposition响应头控制浏览器弹出保存框，若没有该行代码，浏览器会直接打开并且显示文件
		//中文名要经过URLEncoder.encode编码，否则客户端能下载，但是文件名是乱码
		try {
			response.reset();//重置输出流
			response.setHeader("content-disposition", "attachment;filename=user-"+URLEncoder.encode(fileName,"UTF-8"));
			response.setContentType("application/vnd.ms-excel");
			OutputStream toClient = new BufferedOutputStream(response.getOutputStream()); 
			
			InputStream in = new BufferedInputStream(new FileInputStream(filePath)); //获取要下载的文件流
			byte[] buffer = new byte[(int) file.length()];
			in.read(buffer);
			in.close();
			toClient.write(buffer);
			toClient.close();
			file.delete();//删除临时文件
			response.getOutputStream().close();
		}
		catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
		catch (IOException e2) {
			e2.printStackTrace();
		}finally{
			this.renderNull();
		}
	}
	
	@RequiresPermissions({"6_4"})
	public void exportXml(){
		/**
		 * 先获取页面要进行导出的list
		 */
		Long organization_id = getParaToLong("organizationId");
	    HashMap map = new HashMap();
	    String organization = getSessionAttr("organization"); // HttpSession中的组织名称
		// 如果不是就业网用户那么Java程序从HttpSession中提取机构ID，强制使用这个机构ID查询数据，所以用户只能看到自己机构的数据
		if (organization.equals("辽宁省就业网") == false) {
			organization_id = getSessionAttr("organizationId");
			System.out.println(organization_id);
		}else{
			organization_id = null;
		}
		map.put("organization_id", organization_id);
		Long page = getParaToLong("page");
		if (page == null) {
			page = 1L;
		}
		long start = (page - 1) * rowsInPage;
		long length = rowsInPage;
		map.put("start", start);
		map.put("length", length);
		List<Record> list =  i_UserInfoService.searchUserInfo(map);
		//这是最终导出excel的list
		List<Record> resultList = new ArrayList<Record>(); 
		int index = 0;
		for(Record record:list){

			index = index+1;
			String userId = record.getStr("id");
			String username = record.getStr("username");
			String name = record.getStr("name");
			String organizationName = record.getStr("organization");
			String roleName = record.getStr("role");
			String tel = record.getStr("tel");
			String email = record.getStr("email");
				
			Record temp = new Record();
			temp.set("序号", index)
			.set("用户ID",userId)
			.set("用户名", username)
			.set("姓名", name)
			.set("机构名称", organizationName)
			.set("角色", roleName)
			.set("电话", tel)
			.set("电子邮箱", email);
			resultList.add(resultList.size(),temp);		
		}
		String filePath = PathKit.getWebRootPath()+"/export.xml";
		//System.out.println(PathKit.getWebRootPath());
		File file = new File(filePath); //取临时文件
		if(!file.exists()){
			try {
				file.createNewFile(); //如果临时文件不存在创建临时文件
			}
			catch (IOException e) {
				e.printStackTrace();
			}
		}
		WriteXml writer = new WriteXml();
		String[] headers = {"序号","用户ID","用户名","姓名","机构名称","角色","电话","电子邮箱"};
		writer.write( headers,filePath,resultList);
		
		//写完临时文件之后，开始启动浏览器下载
		String fileName = file.getName();
		//System.out.println(fileName);
		HttpServletResponse response = this.getResponse();
		//设置content-disposition响应头控制浏览器弹出保存框，若没有该行代码，浏览器会直接打开并且显示文件
		//中文名要经过URLEncoder.encode编码，否则客户端能下载，但是文件名是乱码
		try {
			response.reset();//重置输出流
			response.setHeader("content-disposition", "attachment;filename=user-"+URLEncoder.encode(fileName,"UTF-8"));
			response.setContentType("application/vnd.ms-excel");
			OutputStream toClient = new BufferedOutputStream(response.getOutputStream()); 
			
			InputStream in = new BufferedInputStream(new FileInputStream(filePath)); //获取要下载的文件流
			byte[] buffer = new byte[(int) file.length()];
			in.read(buffer);
			in.close();
			toClient.write(buffer);
			toClient.close();
			file.delete();//删除临时文件
			response.getOutputStream().close();
		}
		catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
		catch (IOException e2) {
			e2.printStackTrace();
		}finally{
			this.renderNull();
		}
	}
	
	@RequiresPermissions({"6_4"})
	public void exportCsv(){
		/**
		 * 先获取页面要进行导出的list
		 */
		Long organization_id = getParaToLong("organizationId");
	    HashMap map = new HashMap();
	    String organization = getSessionAttr("organization"); // HttpSession中的组织名称
		// 如果不是就业网用户那么Java程序从HttpSession中提取机构ID，强制使用这个机构ID查询数据，所以用户只能看到自己机构的数据
		if (organization.equals("辽宁省就业网") == false) {
			organization_id = getSessionAttr("organizationId");
			System.out.println(organization_id);
		}else{
			organization_id = null;
		}
		map.put("organization_id", organization_id);
		Long page = getParaToLong("page");
		if (page == null) {
			page = 1L;
		}
		long start = (page - 1) * rowsInPage;
		long length = rowsInPage;
		map.put("start", start);
		map.put("length", length);
		List<Record> list =  i_UserInfoService.searchUserInfo(map);
		//这是最终导出excel的list
		List<Record> resultList = new ArrayList<Record>(); 
		int index = 0;
		for(Record record:list){

			index = index+1;
			String userId = record.getStr("id");
			String username = record.getStr("username");
			String name = record.getStr("name");
			String organizationName = record.getStr("organization");
			String roleName = record.getStr("role");
			String tel = record.getStr("tel");
			String email = record.getStr("email");
				
			Record temp = new Record();
			temp.set("序号", index)
			.set("用户ID",userId)
			.set("用户名", username)
			.set("姓名", name)
			.set("机构名称", organizationName)
			.set("角色", roleName)
			.set("电话", tel)
			.set("电子邮箱", email);
			resultList.add(resultList.size(),temp);		
		}
		String filePath = PathKit.getWebRootPath()+"/export.csv";
		//System.out.println(PathKit.getWebRootPath());
		File file = new File(filePath); //取临时文件
		if(!file.exists()){
			try {
				file.createNewFile(); //如果临时文件不存在创建临时文件
			}
			catch (IOException e) {
				e.printStackTrace();
			}
		}
		WriteCsv writer = new WriteCsv();
		String[] headers = {"序号","用户ID","用户名","姓名","机构名称","角色","电话","电子邮箱"};
		writer.write( headers,filePath,resultList);
		
		//写完临时文件之后，开始启动浏览器下载
		String fileName = file.getName();
		//System.out.println(fileName);
		HttpServletResponse response = this.getResponse();
		//设置content-disposition响应头控制浏览器弹出保存框，若没有该行代码，浏览器会直接打开并且显示文件
		//中文名要经过URLEncoder.encode编码，否则客户端能下载，但是文件名是乱码
		try {
			response.reset();//重置输出流
			response.setHeader("content-disposition", "attachment;filename=user-"+URLEncoder.encode(fileName,"UTF-8"));
			response.setContentType("application/vnd.ms-excel");
			OutputStream toClient = new BufferedOutputStream(response.getOutputStream()); 
			
			InputStream in = new BufferedInputStream(new FileInputStream(filePath)); //获取要下载的文件流
			byte[] buffer = new byte[(int) file.length()];
			in.read(buffer);
			in.close();
			toClient.write(buffer);
			toClient.close();
			file.delete();//删除临时文件
			response.getOutputStream().close();
		}
		catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
		catch (IOException e2) {
			e2.printStackTrace();
		}finally{
			this.renderNull();
		}
	}
	
	@RequiresPermissions({"6_1"})
	@Override
	public void importFile() {
		int count = 0;
		//判断是否是就业网用户，如果不是，不可以导入
		String organization = getSessionAttr("organization");
		if(organization.equals("辽宁省就业网") == false){
			count = -1;
			renderJson("result",count);
			return;
		}
		UploadFile _file = this.getFile("file");
		File file = _file.getFile(); //获得文件
		String fileName = file.getName();//获得文件名
		String extension = fileName.substring(fileName.lastIndexOf("."));
		List<Record> list = new ArrayList<Record>();
		if(extension.equals(".xml")){
			try {
				list = ReadXml.read(file);
				count = i_UserInfoService.importFile(list);
				file.delete();
				renderJson("result",count);
			}
			catch (IOException e) {
				e.printStackTrace();
			}
		}
		else if(extension.equals(".csv")){
			list = ReadCsv.read(file.getAbsolutePath());
			count = i_UserInfoService.importFile(list);
			file.delete();
			renderJson("result",count);
	    }else if(extension.equals(".xls")||extension.equals(".xlsx")){
			list = ReadExcel.read(file.getAbsolutePath());
			count = i_UserInfoService.importFile(list);
			file.delete();
			renderJson("result",count);
		}else{
			file.delete();
			count = -2;
			renderJson("result",count);
		} 
		
	}

	public I_UserInfoService getI_UserInfoService() {
		return i_UserInfoService;
	}

	public void setI_UserInfoService(I_UserInfoService i_UserInfoService) {
		this.i_UserInfoService = i_UserInfoService;
	}

	public int getRowsInPage() {
		return rowsInPage;
	}

	public void setRowsInPage(int rowsInPage) {
		this.rowsInPage = rowsInPage;
	}
	public int getRowsInPage1() {
		return rowsInPage1;
	}
	
	public void setRowsInPage1(int rowsInPage1) {
		this.rowsInPage1 = rowsInPage1;
	}

}
