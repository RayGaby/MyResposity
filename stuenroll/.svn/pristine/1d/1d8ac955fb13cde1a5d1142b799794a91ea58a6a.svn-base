package cn.gov.hrss.ln.stuenroll.register;

import java.text.ParseException;
import java.util.HashMap;
import java.util.List;

import com.jfinal.aop.Before;
import com.jfinal.core.Controller;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.spring.Spring;

/**
 * 报名Controller
 * 
 * @author Viva la Vida
 *
 */
@Spring("registerController")
public class RegisterController extends Controller implements I_RegisterController {
	private I_RegisterService i_RegisterService;

	@Override
	public void searchSelectableEducation() {
		List<Record> list = i_RegisterService.searchSelectableEducation();
		renderJson("result", list);
	}

	@Override
	public void searchSelectableMajor() {
		List<Record> list = i_RegisterService.searchSelectableMajor();
		renderJson("result", list);
	}

	@Override
	public void searchSelectableHealthy() {
		List<Record> list = i_RegisterService.searchSelectableHealthy();
		renderJson("result", list);
	}

	@Override
	public void searchSelectablePolitics() {
		List<Record> list = i_RegisterService.searchSelectablePolitics();
		renderJson("result", list);
	}

	@Override
	public void searchSelectablePlace() {
		List<Record> list = i_RegisterService.searchSelectablePlace();
		renderJson("result", list);
	}

	// 查询机构和相应专业可选项
	@Override
	public void searchOrgnizationJoinInYearAtDropDown() {
		int year = getParaToInt("year");
		List<Record> list = i_RegisterService.searchOrgnizationJoinInYearAtDropDown(year);
		renderJson("result", list);

	}

	@Override
	public void searchOrgnizationJoinInYearWithProfessionAtDropDown() {
		int year = getParaToInt("year");
		Long professionId = getParaToLong("professionId");
		List<Record> list = i_RegisterService.searchOrgnizationJoinInYearWithProfessionAtDropDown(year, professionId);
		renderJson("result", list);
	}

	@Override
	public void searchProfessionInYearAtDropDown() {
		int year = getParaToInt("year");
		List<Record> list = i_RegisterService.searchProfessionInYearAtDropDown(year);
		renderJson("result", list);
	}

	// 身份证号既要校验redis又要校验sql
	// redis计时器
	
	// TODO 防止A替B报名 手机验证码

	// 后台校验“提交数据”是否正确
	//@Before(registerValidator.class)
	@Override
	public void registerSubmit(){
		boolean bool = false;
		// 后台验证pid
		checkPid checkpid = new checkPid();
		String pid = getPara("pid");
		boolean tmp;
		try {
			tmp = checkPid.IDCardValidate(pid);
			//加入登录模块后 将enroll_id是否存在的验证写到js中 在加载页面之前 验证   若非空 则不进入报名界面
			if (tmp) {
				
				String user_id = "750959602358685696";
				setSessionAttr("user_id", user_id);
				String studentapp_id = getSessionAttr("user_id");
				// 1.个人信息
				String name = getPara("name");
				String sex = getPara("sex");
				String birthday = getPara("birthday");
				String nation = getPara("nation");
				String healthy = getPara("healthy");
				String politics = getPara("politics");
				// 2.教育信息
				String graduate_school = getPara("graduateSchool");
				String graduate_year = getPara("graduateYear");
				String graduate_date = getPara("graduateDate");
				String major = getPara("graduateSpecialty");
				String education = getPara("education");
				// 3.联系方式
				String resident_address = getPara("address");
				String permanent_address = getPara("householdAddress");
				String home_address = getPara("homeAddress");
				String tel = getPara("tel");
				String email = getPara("email");
				String home_tel = getPara("homeTel");
				// 4.申报信息
				String profession_id = getPara("specialty");
				// 右侧orgnization是前台的历史遗留问题，忽略
				String organization_id = getPara("orgnization");
				String place = getPara("place");

				HashMap map = new HashMap();
				map.put("studentapp_id",studentapp_id);

				// 个人信息
				map.put("name", name);
				map.put("sex", sex);
				map.put("pid", pid);
				map.put("birthday", birthday);
				map.put("nation", nation);
				map.put("healthy", healthy);
				map.put("politics", politics);
				// 教育信息
				map.put("graduate_school", graduate_school);
				map.put("graduate_year", graduate_year);
				map.put("graduate_date", graduate_date);
				map.put("major", major);
				map.put("education", education);
				// 联系方式
				map.put("resident_address", resident_address);
				map.put("permanent_address", permanent_address);
				map.put("home_address", home_address);
				map.put("tel", tel);
				map.put("email", email);
				map.put("home_tel", home_tel);
				// 申报信息
				map.put("profession_id", profession_id);
				map.put("organization_id", organization_id);
				map.put("place", place);
				// 插入成功 返回bool=true
				bool = i_RegisterService.registerSubmit(map);
				renderJson("result", bool);
			}
			else {
				// 重定向至注册界面
				redirect("/frontyard/register/register.html");
			}
		}
		catch (ParseException e) {
			e.printStackTrace();
		}
	}

	public I_RegisterService getI_RegisterService() {
		return i_RegisterService;
	}

	public void setI_RegisterService(I_RegisterService i_RegisterService) {
		this.i_RegisterService = i_RegisterService;
	}
}
