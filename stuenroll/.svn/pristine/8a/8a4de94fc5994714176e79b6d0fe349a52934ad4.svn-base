package cn.gov.hrss.ln.stuenroll.db.mariadb;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

import cn.gov.hrss.ln.stuenroll.db.I_UserInfoDao;

public class UserInfoDao implements I_UserInfoDao {

	@Override
	public List<Record> searchUserInfo(HashMap map, long start, long length) {
		ArrayList param = new ArrayList();

		String username = (String) map.get("username");
		String name = (String) map.get("name");
		Long organizationId = (Long) map.get("organizationId");
		Long roleId = (Long) map.get("roleId");
		String tel = (String) map.get("tel");
		String email = (String) map.get("email");

		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	u.id, ");
		sql.append("	u.`username`, ");
		sql.append("	u.`name`, ");
		sql.append("	IFNULL(o.`name`, '') AS organization, ");
		sql.append("	IFNULL(r.`name`, '') AS role, ");
		sql.append("	u.tel, ");
		sql.append("	u.email, ");
		sql.append("    u.block ");
		sql.append("FROM ");
		sql.append("	user u ");
		sql.append("LEFT JOIN organization o ON u.organization_id = o.id ");
		sql.append("LEFT JOIN role r ON u.role_id = r.id ");
		sql.append("WHERE ");
		sql.append("	1 = 1 ");
		if (username != null && username.length() > 0) {
			sql.append(" AND u.username = ? ");
			param.add(username);
		}
		if (name != null && name.length() > 0) {
			sql.append(" AND u.name = ? ");
			param.add(name);
		}
		if (organizationId != null) {
			sql.append(" AND u.organization_id = ? ");
			param.add(organizationId);
		}
		if (roleId != null) {
			sql.append(" AND u.role_id = ? ");
			param.add(roleId);
		}
		if (email != null) {
			sql.append(" AND u.email = ? ");
			param.add(email);
		}
		sql.append("ORDER BY u.id ");
		sql.append("LIMIT ?, ? ");
		param.add(start);
		param.add(length);

		List<Record> list = Db.find(sql.toString(), param.toArray());
		for (Record record : list) {

			record.set("id", record.getLong("id").toString());
		}
		return list;
	}

	@Override
	public int insertUserInfo(HashMap map) {
		ArrayList param = new ArrayList();
		String username = (String) map.get("username");
		String password = (String) map.get("password");
		String name = (String) map.get("name");
		String sex = (String) map.get("sex");
		String pid = (String) map.get("pid");
		String tel = (String) map.get("tel");
		String email = (String) map.get("email");
		String organization = (String) map.get("organization");
		String role = (String) map.get("role");
		Integer block = (Integer) map.get("block");

		StringBuffer sql = new StringBuffer();
		sql.append("INSERT INTO `user` ( ");
		sql.append("	id, ");
		sql.append("	username, ");
		sql.append("	`password`, ");
		sql.append("	`name`, ");
		sql.append("	pid, ");
		sql.append("	sex, ");
		sql.append("	organization_id, ");
		sql.append("	tel, ");
		sql.append("	wechat, ");
		sql.append("	email, ");
		sql.append("	question, ");
		sql.append("	answer, ");
		sql.append("	block, ");
		sql.append("	role_id ");
		sql.append(") ");
		sql.append("VALUES ");
		sql.append("	( ");
		sql.append("	NEXT VALUE FOR MYCATSEQ_GLOBAL, ");
		sql.append("			?, ");
		param.add(username);
		sql.append("			HEX( ");
		sql.append("				AES_ENCRYPT(?, 'HelloHrss') ");
		param.add(password);
		sql.append("			), ");
		sql.append("			?, ");
		param.add(name);
		sql.append("			?, ");
		param.add(pid);
		sql.append("			?, ");
		param.add(sex);
		sql.append("(SELECT id FROM organization WHERE name=?), ");
		param.add(organization);
		sql.append("			?, ");
		param.add(tel);
		sql.append("            ?, ");
		param.add(" ");
		sql.append("			?, ");
		param.add(email);
		sql.append("            ?, ");
		param.add(" ");
		sql.append("            ?, ");
		param.add(" ");
		sql.append("			?, ");
		param.add(block);
		sql.append("(SELECT id FROM role WHERE name=?) ");
		param.add(role);
		sql.append("	); ");
		int i = Db.update(sql.toString(), param.toArray());
		return i;
	}

	@Override
	public long searchUserInfoCount(HashMap map) {
		ArrayList param = new ArrayList();
		String username = (String) map.get("username");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT COUNT(*) FROM `user` ; ");
		sql.append("WHERE ");
		sql.append("	1 = 1 ");
		if (username != null && username.length() > 0) {
			sql.append(" AND e.name = ? ");
			param.add(username);
		}
		long count = Db.queryLong(sql.toString(), param.toArray());
		return count;
	}

	@Override
	public int deleteUserInfo(Long[] id) {
		StringBuffer sql = new StringBuffer();
		sql.append("DELETE ");
		sql.append("FROM ");
		sql.append("	`user` ");
		sql.append("WHERE ");
		sql.append("	id IN ( ");
		for (int i = 0; i < id.length; i++) {
			sql.append("?");
			if (i != id.length - 1) {
				sql.append(",");
			}
		}
		sql.append(") ");
		int i = Db.update(sql.toString(), id);
		return i;
	}

	@Override
	public List<Record> searchSelectableRole() {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT name FROM role; ");
		List<Record> list = Db.find(sql.toString());
		return list;
	}

	@Override
	public List<Record> searchOrganizationJoinInYearAtDropDown(int year) {
		StringBuffer sql = new StringBuffer();

		sql.append("SELECT ");
		sql.append("	o.id, ");
		sql.append("	o.`name` ");
		sql.append("FROM ");
		sql.append("	organization_join oj ");
		sql.append("JOIN organization o ON oj.organization_id = o.id ");
		sql.append("WHERE ");
		sql.append("	oj.`year` = ? ");
		sql.append("AND oj.block = FALSE; ");

		List<Record> list = Db.find(sql.toString(), year);
		for (Record record : list) {
			record.set("id", record.getLong("id").toString());
		}

		return list;
	}

	@Override
	public List<Record> searchClassMember(HashMap map, long start, long length) {
		ArrayList param = new ArrayList();
		String name = (String) map.get("name");
		String sex = (String) map.get("sex");
		String tel = (String) map.get("tel");
		String pid = (String) map.get("pid");
		String state = (String) map.get("state");

		StringBuffer sql = new StringBuffer();
		sql.append("SELECT ");
		sql.append("	a.id, ");
		sql.append("	a.`name`, ");
		sql.append("  a.`sex`, ");
		sql.append("  a.tel, ");
		sql.append("	a.pid, ");
		sql.append("  ss.`name` AS state ");
		sql.append("FROM ");
		sql.append("	archive a ");
		sql.append("LEFT JOIN classinfo c ON a.classinfo_id = c.id ");
		sql.append("LEFT JOIN student_state ss ON a.state_id = ss.id ");
		sql.append("WHERE 1 = 1 ");
		if (name != null && name.length() > 0) {
			sql.append(" AND a.name = ? ");
			param.add(name);
		}
		if (sex != null && sex.length() > 0) {
			sql.append(" AND a.sex = ? ");
			param.add(sex);
		}
		if (tel != null && tel.length() > 0) {
			sql.append(" AND a.tel = ? ");
			param.add(tel);
		}
		if (pid != null && pid.length() > 0) {
			sql.append(" AND a.pid = ? ");
			param.add(pid);
		}
		if (state != null && state.length() > 0) {
			sql.append(" AND a.state = ? ");
			param.add(state);
		}
		sql.append("ORDER BY a.id ");
		sql.append("LIMIT ?, ?; ");
		param.add(start);
		param.add(length);

		List<Record> list = Db.find(sql.toString(), param.toArray());
		for (Record record : list) {

			record.set("id", record.getLong("id").toString());
		}
		return list;
	}

	@Override
	public long searchClassMemberCount(HashMap map) {
		ArrayList param = new ArrayList();
		String name = (String) map.get("name");
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT COUNT(*) FROM `archive` ; ");
		sql.append("WHERE ");
		sql.append("	1 = 1 ");
		if (name != null && name.length() > 0) {
			sql.append(" AND e.name = ? ");
			param.add(name);
		}
		long count = Db.queryLong(sql.toString(), param.toArray());
		return count;
	}

	@Override
	public int updateUserInfo(HashMap map) {
		ArrayList param = new ArrayList();
		String id = (String) map.get("id");
		String username = (String) map.get("username");
		String password = (String) map.get("password");
		String name = (String) map.get("name");
		String pid = (String) map.get("pid");
		String sex = (String) map.get("sex");
		String organization = (String) map.get("organization");
		String tel = (String) map.get("tel");
		String email = (String) map.get("email");
		String role = (String) map.get("role");
		Integer block = (Integer) map.get("block");

		StringBuffer sql1 = new StringBuffer();
		sql1.append("SELECT	id	FROM	organization	WHERE	name = ? ");
		String organization_id = Db.queryStr(sql1.toString(), organization);
		StringBuffer sql2 = new StringBuffer();
		sql2.append("SELECT	id	FROM	role	WHERE	name = ? ");
		String role_id = Db.queryStr(sql2.toString(), role);

		StringBuffer sql = new StringBuffer();
		sql.append("UPDATE `user` ");
		sql.append("SET ");
		if (username != null && username.length() > 0) {
			sql.append(" username = ?, ");
			param.add(username);
		}
		if (password != null && password.length() > 0) {
			sql.append(" `password` = HEX(AES_ENCRYPT(?, 'HelloHrss')), ");
			param.add(password);
		}
		if (name != null && name.length() > 0) {
			sql.append(" `name` = ?, ");
			param.add(name);
		}
		if (pid != null && pid.length() > 0) {
			sql.append(" pid = ?, ");
			param.add(pid);
		}
		if (sex != null && sex.length() > 0) {
			sql.append(" sex = ?, ");
			param.add(sex);
		}
		if (organization_id != null && organization_id.length() > 0) {
			sql.append(" organization_id=?, ");
			param.add(organization_id);
		}
		if (tel != null && tel.length() > 0) {
			sql.append(" tel = ?, ");
			param.add(tel);
		}
		if (email != null && email.length() > 0) {
			sql.append(" email = ?, ");
			param.add(email);
		}
		if (role_id != null && role_id.length() > 0) {
			sql.append(" role_id=?, ");
			param.add(role_id);
		}
		
		sql.append(" block = ? ");
		param.add(block);
				
		sql.append("WHERE id = ?; ");
		param.add(id);

		int result = Db.update(sql.toString(), param.toArray());
		return result;
	}

}
